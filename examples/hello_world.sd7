const integer: leadingZero is 0299792458;  # A leading zero digit does not introduce an octal integer.
const integer: leading0x is 0x12345;       # A leading 0x does not introduce a hexadecimal integer.
const integer: hexInteger is 16#fedcba98;
const integer: million is 1e6;             # Integer literals can also use exponential notation.
const integer: secondMillion is 1e+6;
const integer: anotherMillion is 1E6;
const integer: negativeExponent is 10e-1;  # A negative exponent in an integer literal is illegal.
const integer: strangeConstant is (hexInteger mod(speedOfLight div million+ord(okay))*3-10**2 rem anotherMillion)mdiv 2;
const integer: anotherConstant is abs(million-speedOfLight)+integer parse "42";
const rational: halve is 1/2;
const bigInteger: numberOfGrainsAtChessboard is 18446744073709551615_;
const bigInteger: numberOfGrainsAtChessboard2 is 16#ffffffffffffffff_;
const bigRational: third is 1_/3_;
const float: archimedesConstant is 3.1415926535897932384626433832795028841971693993751058209749445923;  # π
const float: gravitationalConstant is 6.6743E-11;  # In m**3/(kg*s**2)
const float: coulombConstant is 8.9875517923e9;    # In kg*m**3/(s**2*C**2)
const float: illegalFloatLiteral is .1234;         # There must be at least one digit before the decimal point.
const float: anotherIllegalFloatLiteral is 123.;   # There must be at least one digit after the decimal point.
const complex: i is complex(0.0, 1.0);
const char: space is ' ';
const char: newline is '\n';
const char: apostrophe is ''';
const char: apostrophe2 is '\'';
const char: quote is '"';
const char: qote2 is '\"';
const char: backslash is '\\';
const char: nul is '\0;';
const char: del is '\16#ff;';
const char: alpha is 'α';     # The characters in a char literal are UTF-8 encoded.
const char: illegalNumericEscape    is '\0';  # Numerical escape sequences should end with ";".
const char: illegalEmptyCharLiteral is '';    # Empty char literals are illegal.
const char: illegalTwoCharLiteral   is 'ab';  # A char literal should define exactly one character.
const string: simpleString is "test";
const string: emptyString is "";
const string: quotedString is "The quotes like \" and \' are written with an \\ before as in \\\" and \\\'.";
const string: doublingQuotes is "Use \" instead of "" to represent quotes.";
const string: withGaps is "There can be a gap <\     \> in a string literal.";
const string: multiLine is "There can be a line breaks <\
                           \> in string literals, but they are not part of the string.";
const string: multiLine2 is "Line comments inside of a line break <\  # There can be line comments inside string literals.
                            \> are allowed.";
const string: controlCharacters is "\0;\1;\2;\3;\4;\5;\6;\a\b\t\n\v\f\r\14;\15;\16;\17;\18;\19;\20;\21;\22;\23;\24;\25;\26;\e\28;\29;\30;\31;";
const string: hexCharacters is "\16#f;=\\a \16#10;=\\b \16#11;=\\t \16#12;=\\n";
const string: greekAlphabet is "αβγδεζηθικλμνξοπρςστυφχψω";  # The characters in a string literal are UTF-8 encoded.
const string: lowerCaseEscapes is "\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z";  # Not all of them exist.
const bitset: fibonacci is {1, 2, 3, 5, 8, 13, 21, 34, 55};
const bitset: negative is {-1, -2, -3, -4, -5, -6};
const bitset: digit is {0 .. 9};
const bitset: mixedSet is ((fibonacci | negative) & digit) >< {2, 4, 6, 8};
const reference: myRef is NIL;
const ref_list: myRefList is ref_list.EMPTY;
const array integer: emptyArray is 0 times 0;